name: Check Base Images

on:
  schedule:
    # Run daily at 5 AM UTC to catch base image updates quickly
    - cron: "0 5 * * *"
  workflow_dispatch:
    inputs:
      force_check:
        description: "Force check even if no recent updates"
        required: false
        default: false
        type: boolean

env:
  GITHUB_REGISTRY: ghcr.io
  GITLAB_REGISTRY: registry.gitlab.com
  GL_USERNAME: vikshan

jobs:
  check-updates:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
      actions: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Bun and install dependencies
        uses: iamvikshan/.github/.github/actions/setup-bun@main

      - name: Validate script functionality
        run: |
          echo "🔧 Validating checkImages script..."

          # Test that the script runs and returns valid JSON
          if ! bun scripts/checkImages.ts --help >/dev/null 2>&1; then
            echo "❌ Script help failed"
            exit 1
          fi

          # Test JSON output format
          TEST_OUTPUT=$(timeout 60 bun scripts/checkImages.ts --comprehensive --json-only 2>/dev/null || echo '{"error":"timeout"}')

          if echo "$TEST_OUTPUT" | jq empty 2>/dev/null; then
            echo "✅ Script produces valid JSON"
            echo "📋 Test output keys: $(echo "$TEST_OUTPUT" | jq -r 'keys | join(", ")')"
          else
            echo "❌ Script does not produce valid JSON"
            echo "Raw output: $TEST_OUTPUT"
            exit 1
          fi

      - name: Check for base image updates
        id: check_updates
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          FORCE_CHECK: ${{ github.event.inputs.force_check }}
        run: |
          echo "🔍 Checking for base image updates..."

          # Run comprehensive base image check with error handling
          set +e  # Don't exit on error
          RESULT=$(bun scripts/checkImages.ts --comprehensive --json-only 2>/dev/null)
          SCRIPT_EXIT_CODE=$?
          set -e  # Re-enable exit on error

          echo "📋 Base image check result: $RESULT"

          # Check if the script ran successfully
          if [ $SCRIPT_EXIT_CODE -ne 0 ]; then
            echo "❌ Script failed with exit code $SCRIPT_EXIT_CODE"
            echo "🔄 Falling back to safe defaults..."
            HAS_UPDATES="false"
            AFFECTED_CONTAINERS=""
            UPDATE_COUNT="0"
          else
            # Validate that we have valid JSON
            if echo "$RESULT" | jq empty 2>/dev/null; then
              echo "✅ Valid JSON received from script"
              
              # Parse the JSON result with error handling
              HAS_UPDATES=$(echo "$RESULT" | jq -r '.hasUpdates // false')
              AFFECTED_CONTAINERS=$(echo "$RESULT" | jq -r '.affectedContainers // [] | join(",")')
              UPDATE_COUNT=$(echo "$RESULT" | jq -r '.updateCount // 0')
              SCRIPT_SUCCESS=$(echo "$RESULT" | jq -r '.success // false')
              
              # Check if the script reported success
              if [ "$SCRIPT_SUCCESS" != "true" ]; then
                echo "⚠️  Script reported internal error"
                SCRIPT_ERROR=$(echo "$RESULT" | jq -r '.error // "Unknown error"')
                echo "Error details: $SCRIPT_ERROR"
                # Treat as no updates if there was an error
                HAS_UPDATES="false"
                AFFECTED_CONTAINERS=""
                UPDATE_COUNT="0"
              fi
            else
              echo "❌ Invalid JSON received from script"
              echo "Raw output: $RESULT"
              # Try to extract JSON line as fallback
              JSON_LINE=$(echo "$RESULT" | grep "^{" | head -1 || echo "")
              if [ -n "$JSON_LINE" ] && echo "$JSON_LINE" | jq empty 2>/dev/null; then
                echo "🔄 Found valid JSON line, using fallback parsing"
                HAS_UPDATES=$(echo "$JSON_LINE" | jq -r '.hasUpdates // false')
                AFFECTED_CONTAINERS=$(echo "$JSON_LINE" | jq -r '.affectedContainers // [] | join(",")')
                UPDATE_COUNT=$(echo "$JSON_LINE" | jq -r '.updateCount // 0')
              else
                echo "🔄 Falling back to safe defaults due to parsing failure"
                HAS_UPDATES="false"
                AFFECTED_CONTAINERS=""
                UPDATE_COUNT="0"
              fi
            fi
          fi

          # Override if force check is enabled
          if [ "$FORCE_CHECK" = "true" ]; then
            echo "⚠️  Force check enabled - treating as having updates"
            HAS_UPDATES="true"
            if [ "$AFFECTED_CONTAINERS" = "" ]; then
              AFFECTED_CONTAINERS="bun,bun-node,ubuntu-bun,ubuntu-bun-node,gitpod-bun,gitpod-bun-node,gitpod-ubuntu-bun,gitpod-ubuntu-bun-node"
            fi
          fi

          echo "has_updates=$HAS_UPDATES" >> $GITHUB_OUTPUT
          echo "affected_containers=$AFFECTED_CONTAINERS" >> $GITHUB_OUTPUT
          echo "update_count=$UPDATE_COUNT" >> $GITHUB_OUTPUT

          if [ "$HAS_UPDATES" = "true" ]; then
            echo "📦 Base image updates detected for: $AFFECTED_CONTAINERS"
            echo "🔢 Total updates: $UPDATE_COUNT"
          else
            echo "✅ All base images are up to date"
          fi

      - name: Update documentation
        if: steps.check_updates.outputs.has_updates == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          AFFECTED_CONTAINERS: ${{ steps.check_updates.outputs.affected_containers }}
          UPDATE_COUNT: ${{ steps.check_updates.outputs.update_count }}
          GIT_AUTHOR_EMAIL: "${{ github.repository_owner_id }}+${{ github.repository_owner }}@users.noreply.github.com"
          GIT_AUTHOR_NAME: "${{ github.actor }}"
          GIT_COMMITTER_EMAIL: "${{ github.repository_owner_id }}+${{ github.repository_owner }}@users.noreply.github.com"
          GIT_COMMITTER_NAME: "${{ github.actor }}"
        run: |
          echo "📝 Updating documentation with base image changes..."

          # Generate detailed update notes using dedicated script
          bun scripts/checkImages.ts --generate-update-notes --containers="$AFFECTED_CONTAINERS"

          echo "✅ Documentation updated with base image changes"

      - name: Commit base image updates
        if: steps.check_updates.outputs.has_updates == 'true'
        env:
          AFFECTED_CONTAINERS: ${{ steps.check_updates.outputs.affected_containers }}
        run: |
          echo "📝 Committing base image updates..."

          # Configure git with repository owner
          git config --global user.email "${{ github.repository_owner_id }}+${{ github.repository_owner }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

          # Add updated documentation files
          git add CHANGELOG.md README.md docs/IMAGE_VARIANTS.md || true

          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "ℹ️  No documentation changes to commit"
          else
            # Create commit with conventional commit format to trigger patch release
            git commit -m "fix: update base images for $AFFECTED_CONTAINERS" \
                      -m "- Updated base images to latest versions with security patches" \
                      -m "- Improved compatibility and performance from upstream updates" \
                      -m "- Documentation updated with latest base image information" \
                      -m "" \
                      -m "This commit triggers an automated patch release to rebuild DevContainers with updated base images."

            # Push the changes
            git push origin main

            echo "✅ Base image updates committed and pushed"
            echo "🚀 This will trigger the release workflow to rebuild containers"
          fi

      - name: Trigger release workflow
        if: steps.check_updates.outputs.has_updates == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "🚀 Triggering release workflow for base image updates..."

          # Wait a moment for the commit to be processed
          sleep 10

          # Trigger the release workflow via workflow_dispatch
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/releases.yml/dispatches" \
            -d '{"ref":"main","inputs":{"trigger_reason":"Base image updates detected"}}'

          if [ $? -eq 0 ]; then
            echo "✅ Release workflow triggered successfully"
          else
            echo "⚠️  Failed to trigger release workflow, but changes are committed"
            echo "ℹ️  The release workflow should still trigger automatically due to the commit"
          fi

      - name: No updates needed
        if: steps.check_updates.outputs.has_updates != 'true'
        run: |
          echo "ℹ️  No base image updates needed - all images are current"
          echo "📊 Check completed at $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "🔄 Next automatic check: $(date -d 'next sunday 06:00' -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "✅ Base image check workflow completed successfully"

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "❌ Base image check workflow failed"
          echo "🔍 Checking git status..."
          git status || true
          echo "📋 Checking recent logs..."
          tail -50 /tmp/*.log 2>/dev/null || echo "No log files found"
