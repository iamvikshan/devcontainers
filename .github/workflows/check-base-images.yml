name: Check Base Images

on:
  schedule:
    # Run weekly on Sundays at 6 AM UTC
    - cron: "0 6 * * 0"
  workflow_dispatch:

env:
  GITHUB_REGISTRY: ghcr.io
  GITLAB_REGISTRY: registry.gitlab.com
  GL_USERNAME: vikshan

jobs:
  check-updates:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Bun and install dependencies
        uses: iamvikshan/.github/.github/actions/setup-bun@main

      - name: Check for base image updates
        id: check_updates
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "🔍 Checking for base image updates..."

          # Run the checkImages script and capture output
          if bun run check-updates > update_check.log 2>&1; then
            echo "✅ Base image check completed successfully"
          else
            echo "❌ Base image check failed"
            cat update_check.log
            exit 1
          fi

          # Check if updates were found
          if grep -q "🚀 Updates found!" update_check.log; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "📦 Base image updates detected!"
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "✅ All base images are up to date"
          fi

      - name: Generate update notes
        if: steps.check_updates.outputs.has_updates == 'true'
        id: generate_notes
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "📝 Generating detailed update notes..."

          # Create a script to generate detailed update information
          cat > generate_update_notes.ts << 'EOF'
          import { imageOperations } from './scripts/imageOperations'
          import { readFileSync, writeFileSync, existsSync } from 'fs'

          async function generateUpdateNotes() {
            const updates = await imageOperations.checkBaseImageUpdates()
            const hasUpdates = updates.some(u => u.hasUpdate)
            
            if (!hasUpdates) {
              console.log('No updates found')
              return
            }
            
            const now = new Date()
            const dateStr = now.toISOString().split('T')[0]
            const timeStr = now.toISOString()
            
            // Read existing VERSIONS.md or create new one
            let versionsContent = ''
            if (existsSync('VERSIONS.md')) {
              versionsContent = readFileSync('VERSIONS.md', 'utf-8')
            } else {
              versionsContent = `# DevContainer Versions\n\nThis file tracks base image updates and releases for our DevContainer configurations.\n\n## Latest Updates\n\n`
            }
            
            // Generate update entry
            const updatedImages = updates.filter(u => u.hasUpdate)
            let updateEntry = `### ${dateStr} - Base Image Updates\n\n`
            updateEntry += `**Updated at:** ${timeStr}\n\n`
            updateEntry += `**Base images updated:**\n`
            
            for (const update of updatedImages) {
              const lastUpdated = new Date(update.lastUpdated).toLocaleDateString()
              updateEntry += `- **${update.containerName}**: \`${update.baseImage}\`\n`
              updateEntry += `  - Base image last updated: ${lastUpdated}\n`
              updateEntry += `  - Digest: \`${update.latestDigest}\`\n`
            }
            
            updateEntry += `\n**Changes:**\n`
            updateEntry += `- Updated base images to latest versions\n`
            updateEntry += `- Security patches and bug fixes from upstream\n`
            updateEntry += `- Improved compatibility and performance\n\n`
            updateEntry += `**Impact:** Patch release - DevContainers will be rebuilt with updated base images\n\n`
            updateEntry += `---\n\n`
            
            // Insert at the beginning of the Latest Updates section
            const latestUpdatesIndex = versionsContent.indexOf('## Latest Updates')
            if (latestUpdatesIndex !== -1) {
              const insertIndex = versionsContent.indexOf('\n\n', latestUpdatesIndex) + 2
              versionsContent = versionsContent.slice(0, insertIndex) + updateEntry + versionsContent.slice(insertIndex)
            } else {
              versionsContent += updateEntry
            }
            
            writeFileSync('VERSIONS.md', versionsContent)
            console.log('✅ VERSIONS.md updated with base image changes')
            
            // Also create a summary for the commit message
            const summary = updatedImages.map(u => u.containerName).join(', ')
            writeFileSync('update_summary.txt', summary)
          }

          generateUpdateNotes().catch(console.error)
          EOF

          # Run the update notes generator
          bun run generate_update_notes.ts

      - name: Commit base image updates
        if: steps.check_updates.outputs.has_updates == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Read the summary of updated images
          UPDATED_IMAGES=$(cat update_summary.txt 2>/dev/null || echo "base images")

          # Add the updated VERSIONS.md file
          git add VERSIONS.md

          # Create commit with conventional commit format to trigger patch release
          git commit -m "fix: update base images for ${UPDATED_IMAGES}" -m "- Updated base images to latest versions" -m "- Security patches and bug fixes from upstream" -m "- Improved compatibility and performance" -m "" -m "This commit triggers an automated patch release to rebuild DevContainers with updated base images."

          # Push the changes
          git push

          echo "✅ Base image updates committed successfully"
          echo "🚀 This will trigger a patch release via semantic-release"

      - name: Clean up temporary files
        if: always()
        run: |
          rm -f update_check.log generate_update_notes.ts update_summary.txt
