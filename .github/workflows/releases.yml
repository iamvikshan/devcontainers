name: Release DevContainers

on:
  workflow_dispatch:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: "0 2 * * 0"
  push:
    branches: [main]

env:
  GITHUB_REGISTRY: ghcr.io
  GITLAB_REGISTRY: registry.gitlab.com
  GL_USERNAME: vikshan

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node, Bun and install dependencies
        uses: iamvikshan/.github/.github/actions/setup-node-bun@main

      - name: Pre-release check
        id: pre_release_check
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "üîç Checking if release is needed..."

          # Run pre-release check
          RESULT=$(bun run pre-release-check 2>&1)
          echo "$RESULT"

          # Parse the result
          if echo "$RESULT" | grep -q '"shouldRelease": true'; then
            echo "release_needed=true" >> $GITHUB_OUTPUT

            # Extract release type
            if echo "$RESULT" | grep -q '"releaseType": "forced"'; then
              echo "release_type=forced" >> $GITHUB_OUTPUT
              echo "üöÄ Base image updates detected - will force a release"
            else
              echo "release_type=semantic" >> $GITHUB_OUTPUT
              echo "‚úÖ Semantic release will create a new version"
            fi

            # Get predicted version for container building
            PREDICTED_VERSION=$(bun run predict-version)
            if [ "$PREDICTED_VERSION" != "no-version" ]; then
              echo "predicted_version=$PREDICTED_VERSION" >> $GITHUB_OUTPUT
              echo "üìã Predicted version: $PREDICTED_VERSION"
            fi
          else
            echo "release_needed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No release needed"
          fi

      - name: Create force release commit
        if: steps.pre_release_check.outputs.release_needed == 'true' && steps.pre_release_check.outputs.release_type == 'forced'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "üìù Creating force release commit for base image updates..."

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create the force release commit
          bun run pre-release-check --create-commit

          echo "‚úÖ Force release commit created"

      - name: Configure registries
        if: steps.pre_release_check.outputs.release_needed == 'true'
        uses: ./.github/actions/configure-registries
        with:
          github-pat: ${{ secrets.GH_TOKEN }}
          gitlab-token: ${{ secrets.GITLAB_TOKEN }}
          github-registry: ${{ env.GITHUB_REGISTRY }}
          gitlab-registry: ${{ env.GITLAB_REGISTRY }}
          github-username: ${{ github.actor }}
          dockerhub-username: ${{ env.GL_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build containers with predicted version
        if: steps.pre_release_check.outputs.release_needed == 'true' && steps.pre_release_check.outputs.predicted_version != ''
        uses: ./.github/actions/build-containers
        with:
          version: ${{ steps.pre_release_check.outputs.predicted_version }}
          github-registry: ${{ env.GITHUB_REGISTRY }}
          gitlab-registry: ${{ env.GITLAB_REGISTRY }}
          gitlab-project-path: ${{ env.GL_USERNAME }}/${{ github.event.repository.name }}
          dockerhub-username: ${{ env.GL_USERNAME }}

      - name: Update VERSIONS.md with real-time data
        if: steps.pre_release_check.outputs.release_needed == 'true' && steps.pre_release_check.outputs.predicted_version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "‚è≥ Waiting for images to be available across all registries..."
          sleep 30

          echo "üìù Updating VERSIONS.md with real-time data..."
          bun run update-versions --version=${{ steps.pre_release_check.outputs.predicted_version }} --notes="Automated release with latest base images,Security patches and updates,Documentation improvements"

          echo "üìã Staging VERSIONS.md and README files for semantic release..."
          git add VERSIONS.md README.md base/*/README.md

      - name: Semantic Release
        if: steps.pre_release_check.outputs.release_needed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ github.actor }}
          GIT_AUTHOR_EMAIL: ${{ github.actor }}@users.noreply.github.com
          GIT_COMMITTER_NAME: ${{ github.actor }}
          GIT_COMMITTER_EMAIL: ${{ github.actor }}@users.noreply.github.com
        run: |
          echo "üöÄ Running semantic release..."
          bunx semantic-release

      - name: No release needed
        if: steps.pre_release_check.outputs.release_needed != 'true'
        run: |
          echo "‚ÑπÔ∏è  No release needed - all images are up to date and no code changes require a release"
          echo "‚úÖ Workflow completed successfully"
