name: Release DevContainers

on:
  workflow_dispatch:
    inputs:
      trigger_reason:
        description: "Reason for manual trigger"
        required: false
        default: "Manual release trigger"
        type: string
  push:
    branches: [main]

env:
  GITHUB_REGISTRY: ghcr.io
  GITLAB_REGISTRY: registry.gitlab.com
  GL_USERNAME: vikshan

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Bun and install dependencies
        uses: iamvikshan/.github/.github/actions/setup-bun@main

      - name: Release analysis
        id: release_analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GIT_AUTHOR_EMAIL: "${{ github.repository_owner_id }}+${{ github.repository_owner }}@users.noreply.github.com"
          GIT_AUTHOR_NAME: "${{ github.actor }}"
          GIT_COMMITTER_EMAIL: "${{ github.repository_owner_id }}+${{ github.repository_owner }}@users.noreply.github.com"
          GIT_COMMITTER_NAME: "${{ github.actor }}"
        run: |
          echo "üîç Analyzing changes for release..."

          # Determine trigger type
          TRIGGER="push"
          if [ "${{ github.event_name }}" = "schedule" ]; then
            TRIGGER="schedule"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Check if triggered by base image check
            if [[ "${{ github.event.inputs.trigger_reason }}" == *"Base image"* ]] || [[ "${{ github.event.inputs.trigger_reason }}" == *"base image"* ]]; then
              TRIGGER="base-image-update"
              echo "üîÑ Detected base image update trigger"
            else
              TRIGGER="manual"
            fi
          fi

          # Run release orchestrator in workflow mode
          RESULT=$(bun scripts/releaseOrchestrator.ts --trigger=$TRIGGER --workflow)
          echo "üìã Release analysis result: $RESULT"

          # Parse the JSON result
          SUCCESS=$(echo "$RESULT" | jq -r '.success')
          SHOULD_RELEASE=$(echo "$RESULT" | jq -r '.outputs.should_release')
          RELEASE_TYPE=$(echo "$RESULT" | jq -r '.outputs.release_type')
          AFFECTED_CONTAINERS=$(echo "$RESULT" | jq -r '.outputs.affected_containers')
          VERSION_MAP=$(echo "$RESULT" | jq -r '.outputs.version_map')

          echo "success=$SUCCESS" >> $GITHUB_OUTPUT
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "affected_containers=$AFFECTED_CONTAINERS" >> $GITHUB_OUTPUT
          echo "version_map=$VERSION_MAP" >> $GITHUB_OUTPUT

          if [ "$SUCCESS" = "true" ] && [ "$SHOULD_RELEASE" = "true" ]; then
            echo "release_needed=true" >> $GITHUB_OUTPUT
            echo "üöÄ Release needed: $RELEASE_TYPE"
            echo "üì¶ Affected containers: $AFFECTED_CONTAINERS"
          else
            echo "release_needed=false" >> $GITHUB_OUTPUT
            if [ "$SUCCESS" = "false" ]; then
              ERROR=$(echo "$RESULT" | jq -r '.error // "Unknown error"')
              echo "‚ùå Release analysis failed: $ERROR"
            else
              echo "‚ÑπÔ∏è  No release needed"
            fi
          fi

      - name: Configure registries
        if: steps.release_analysis.outputs.release_needed == 'true'
        uses: ./.github/actions/configure-registries
        with:
          github-pat: ${{ secrets.GH_TOKEN }}
          gitlab-token: ${{ secrets.GITLAB_TOKEN }}
          github-registry: ${{ env.GITHUB_REGISTRY }}
          gitlab-registry: ${{ env.GITLAB_REGISTRY }}
          github-username: ${{ github.actor }}
          dockerhub-username: ${{ env.GL_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push containers
        if: steps.release_analysis.outputs.release_needed == 'true'
        id: build_containers
        uses: ./.github/actions/build-and-push
        with:
          version-map: ${{ steps.release_analysis.outputs.version_map }}
          affected-containers: ${{ steps.release_analysis.outputs.affected_containers }}
          github-registry: ${{ env.GITHUB_REGISTRY }}
          gitlab-registry: ${{ env.GITLAB_REGISTRY }}
          dockerhub-username: ${{ env.GL_USERNAME }}
          repository-name: ${{ github.event.repository.name }}

      - name: Cleanup untagged images
        if: steps.release_analysis.outputs.release_needed == 'true' && steps.build_containers.outputs.build-success == 'true'
        continue-on-error: true
        uses: ./.github/actions/cleanup-images
        with:
          affected-containers: ${{ steps.release_analysis.outputs.affected_containers }}
          github-token: ${{ secrets.GH_TOKEN }}
          repository-name: ${{ github.event.repository.name }}

      - name: Extract tool versions
        if: steps.release_analysis.outputs.release_needed == 'true' && steps.build_containers.outputs.build-success == 'true'
        continue-on-error: true
        uses: ./.github/actions/extract-versions
        with:
          version-map: ${{ steps.release_analysis.outputs.version_map }}
          affected-containers: ${{ steps.release_analysis.outputs.affected_containers }}

      - name: Update CHANGELOG.md with release info
        if: steps.release_analysis.outputs.release_needed == 'true' && steps.build_containers.outputs.build-success == 'true'
        env:
          VERSION_MAP: ${{ steps.release_analysis.outputs.version_map }}
        run: |
          echo "üìù Updating CHANGELOG.md with new release versions..."
          bun scripts/updateVersionsTable.ts --version-map="$VERSION_MAP" || echo "‚ö†Ô∏è Failed to update CHANGELOG.md, continuing..."

      - name: Update documentation
        if: steps.release_analysis.outputs.release_needed == 'true' && steps.build_containers.outputs.build-success == 'true'
        continue-on-error: true
        uses: ./.github/actions/update-docs
        with:
          gitlab-token: ${{ secrets.GITLAB_TOKEN }}
          github-token: ${{ secrets.GH_TOKEN }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Commit and push documentation
        if: steps.release_analysis.outputs.release_needed == 'true' && steps.build_containers.outputs.build-success == 'true'
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          VERSION_MAP: ${{ steps.release_analysis.outputs.version_map }}
        run: |
          echo "üìù Committing documentation changes..."

          # Configure git
          git config --global user.email "${{ github.repository_owner_id }}+${{ github.repository_owner }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

          # Check if there are any changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "‚ÑπÔ∏è  No documentation changes to commit"
          else
            # Get the highest version for the commit message
            HIGHEST_VERSION=$(echo "$VERSION_MAP" | jq -r 'to_entries | max_by(.value | split(".") | map(tonumber)) | .value')
            
            # Commit the documentation changes
            git commit -m "docs: update documentation for release v$HIGHEST_VERSION [skip ci]" \
                      -m "- Updated CHANGELOG.md with container versions and tool information" \
                      -m "- Updated README files with latest image sizes"
            
            echo "‚úÖ Documentation changes committed"
            
            # Pull any remote changes before pushing
            echo "üîÑ Pulling remote changes to avoid conflicts..."
            git pull --rebase origin main || {
              echo "‚ö†Ô∏è  Merge conflicts detected. Using merge strategy instead."
              git rebase --abort
              git pull origin main --no-edit
            }
            
            # Push the documentation commit
            git push origin main
            echo "‚úÖ Documentation changes pushed to main branch"
          fi

      - name: No release needed
        if: steps.release_analysis.outputs.release_needed != 'true'
        run: |
          echo "‚ÑπÔ∏è  No Docker image release needed - all images are up to date"
          echo "‚úÖ Workflow completed successfully"
