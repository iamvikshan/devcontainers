name: Release DevContainers

on:
  workflow_dispatch:
    inputs:
      trigger_reason:
        description: "Reason for manual trigger"
        required: false
        default: "Manual release trigger"
        type: string
  push:
    branches: [main]

env:
  GITHUB_REGISTRY: ghcr.io
  GITLAB_REGISTRY: registry.gitlab.com
  GL_USERNAME: vikshan

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Bun and install dependencies
        uses: iamvikshan/.github/.github/actions/setup-bun@main

      - name: Release analysis
        id: release_analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "üîç Analyzing changes for release..."

          # Determine trigger type
          TRIGGER="push"
          if [ "${{ github.event_name }}" = "schedule" ]; then
            TRIGGER="schedule"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TRIGGER="manual"
          fi

          # Run release orchestrator in workflow mode
          RESULT=$(bun scripts/releaseOrchestrator.ts --trigger=$TRIGGER --workflow)
          echo "üìã Release analysis result: $RESULT"

          # Parse the JSON result
          SUCCESS=$(echo "$RESULT" | jq -r '.success')
          SHOULD_RELEASE=$(echo "$RESULT" | jq -r '.outputs.should_release')
          RELEASE_TYPE=$(echo "$RESULT" | jq -r '.outputs.release_type')
          AFFECTED_CONTAINERS=$(echo "$RESULT" | jq -r '.outputs.affected_containers')
          VERSION_MAP=$(echo "$RESULT" | jq -r '.outputs.version_map')

          echo "success=$SUCCESS" >> $GITHUB_OUTPUT
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "affected_containers=$AFFECTED_CONTAINERS" >> $GITHUB_OUTPUT
          echo "version_map=$VERSION_MAP" >> $GITHUB_OUTPUT

          if [ "$SUCCESS" = "true" ] && [ "$SHOULD_RELEASE" = "true" ]; then
            echo "release_needed=true" >> $GITHUB_OUTPUT
            echo "üöÄ Release needed: $RELEASE_TYPE"
            echo "üì¶ Affected containers: $AFFECTED_CONTAINERS"

            # Extract individual container versions for build process
            echo "$VERSION_MAP" | jq -r 'to_entries[] | "\(.key)_version=\(.value)"' >> $GITHUB_OUTPUT
          else
            echo "release_needed=false" >> $GITHUB_OUTPUT
            if [ "$SUCCESS" = "false" ]; then
              ERROR=$(echo "$RESULT" | jq -r '.error // "Unknown error"')
              echo "‚ùå Release analysis failed: $ERROR"
            else
              echo "‚ÑπÔ∏è  No release needed"
            fi
          fi

      - name: Create base image update commit
        if: steps.release_analysis.outputs.release_needed == 'true' && steps.release_analysis.outputs.release_type == 'patch'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "üìù Creating base image update commit..."

          # Configure git
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git config --local user.name "${{ github.actor }}"

          # Create commit for base image updates if needed
          if echo "${{ steps.release_analysis.outputs.version_map }}" | jq -e '. | length > 0' > /dev/null; then
            echo "‚úÖ Base image update commit will be handled by release process"
          fi

      - name: Configure registries
        if: steps.release_analysis.outputs.release_needed == 'true'
        uses: ./.github/actions/configure-registries
        with:
          github-pat: ${{ secrets.GH_TOKEN }}
          gitlab-token: ${{ secrets.GITLAB_TOKEN }}
          github-registry: ${{ env.GITHUB_REGISTRY }}
          gitlab-registry: ${{ env.GITLAB_REGISTRY }}
          github-username: ${{ github.actor }}
          dockerhub-username: ${{ env.GL_USERNAME }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build containers
        if: steps.release_analysis.outputs.release_needed == 'true'
        id: build_containers
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          VERSION_MAP: ${{ steps.release_analysis.outputs.version_map }}
          AFFECTED_CONTAINERS: ${{ steps.release_analysis.outputs.affected_containers }}
        run: |
          echo "üî® Building containers..."
          echo "üì¶ Version map: $VERSION_MAP"
          echo "üìã Affected containers: $AFFECTED_CONTAINERS"

          # Create a custom build script that handles individual container versioning
          cat > build_containers.sh << 'EOF'
          #!/bin/bash
          set -e

          VERSION_MAP='${{ steps.release_analysis.outputs.version_map }}'
          AFFECTED_CONTAINERS='${{ steps.release_analysis.outputs.affected_containers }}'

          if [ "$AFFECTED_CONTAINERS" = "" ]; then
            echo "‚ÑπÔ∏è  No containers to build"
            exit 0
          fi

          IFS=',' read -ra CONTAINERS <<< "$AFFECTED_CONTAINERS"

          for container in "${CONTAINERS[@]}"; do
            container=$(echo "$container" | xargs) # trim whitespace
            version=$(echo "$VERSION_MAP" | jq -r ".[\"$container\"] // \"latest\"")

            echo "üî® Building $container:$version..."

            # Determine dockerfile path
            if [[ "$container" == ubuntu-* ]]; then
              dockerfile_path="base/ubuntu/${container#ubuntu-}/Dockerfile"
              context_dir="base/ubuntu/${container#ubuntu-}"
            else
              dockerfile_path="base/$container/.devcontainer/Dockerfile"
              context_dir="base/$container/.devcontainer"
            fi

            if [ -f "$dockerfile_path" ]; then
              # Build and push to all registries
              docker buildx build \
                --file "$dockerfile_path" \
                --push \
                --platform linux/amd64 \
                --provenance=false \
                --output type=registry \
                --tag "${{ env.GITHUB_REGISTRY }}/${{ github.repository }}/${container}:v${version}" \
                --tag "${{ env.GITHUB_REGISTRY }}/${{ github.repository }}/${container}:latest" \
                --tag "${{ env.GITLAB_REGISTRY }}/${{ env.GL_USERNAME }}/${{ github.event.repository.name }}/${container}:v${version}" \
                --tag "${{ env.GITLAB_REGISTRY }}/${{ env.GL_USERNAME }}/${{ github.event.repository.name }}/${container}:latest" \
                --tag "${{ env.GL_USERNAME }}/${container}:v${version}" \
                --tag "${{ env.GL_USERNAME }}/${container}:latest" \
                "$context_dir"

              echo "‚úÖ Built and pushed $container:$version"

              # Close any existing build failure issues
              bun scripts/issueManager.ts --close-success --container="$container" --version="$version" --silent || true
            else
              echo "‚ùå Dockerfile not found: $dockerfile_path"

              # Create build failure issue
              bun scripts/issueManager.ts \
                --container="$container" \
                --version="$version" \
                --error="Dockerfile not found: $dockerfile_path" \
                --workflow="${{ github.workflow }}" \
                --run-id="${{ github.run_id }}" \
                --silent || true

              exit 1
            fi
          done
          EOF

          chmod +x build_containers.sh

          # Execute the build script with error handling
          if ./build_containers.sh; then
            echo "build_success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All containers built successfully"
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
            echo "‚ùå Container build failed"
            exit 1
          fi

      - name: Extract tool versions
        if: steps.release_analysis.outputs.release_needed == 'true' && steps.build_containers.outputs.build_success == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AFFECTED_CONTAINERS: ${{ steps.release_analysis.outputs.affected_containers }}
          VERSION_MAP: ${{ steps.release_analysis.outputs.version_map }}
        run: |
          echo "‚è≥ Waiting for images to be available across all registries..."
          sleep 30

          echo "üîç Extracting tool versions from built containers..."

          # Extract tool versions from the newly built containers using registry images
          if [ "$AFFECTED_CONTAINERS" != "" ]; then
            # Use the actual version from version map for the first container to determine the tag
            FIRST_CONTAINER=$(echo "$AFFECTED_CONTAINERS" | cut -d',' -f1 | xargs)
            VERSION_TAG=$(echo "$VERSION_MAP" | jq -r ".[\"$FIRST_CONTAINER\"] // \"latest\"")
            
            echo "üìã Using version tag: v$VERSION_TAG"
            echo "üîç Extracting from GitHub Container Registry images..."
            
            bun scripts/toolVersionExtractor.ts --registry=ghcr --containers="$AFFECTED_CONTAINERS" --version="v$VERSION_TAG" --output="tool-versions.json" --silent
          fi

      - name: Update documentation with real-time data
        if: steps.release_analysis.outputs.release_needed == 'true' && steps.build_containers.outputs.build_success == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          VERSION_MAP: ${{ steps.release_analysis.outputs.version_map }}
        run: |
          echo "üìù Updating VERSIONS.md with real-time data..."

          # Update VERSIONS.md with new version information
          bun scripts/versionsManager.ts --version-map="$VERSION_MAP" --notes="Automated release with latest base images,Security patches and updates,Documentation improvements"

          echo "üìã Staging documentation files..."
          git add VERSIONS.md README.md base/*/README.md CHANGELOG.md container-versions.json tool-versions.json || true

      - name: Commit documentation changes
        if: steps.release_analysis.outputs.release_needed == 'true' && steps.build_containers.outputs.build_success == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          VERSION_MAP: ${{ steps.release_analysis.outputs.version_map }}
          RELEASE_TYPE: ${{ steps.release_analysis.outputs.release_type }}
        run: |
          echo "üìù Committing documentation changes..."

          # Configure git
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git config --local user.name "${{ github.actor }}"

          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è  No documentation changes to commit"
          else
            # Get the highest version for the commit message
            HIGHEST_VERSION=$(echo "$VERSION_MAP" | jq -r 'to_entries | max_by(.value | split(".") | map(tonumber)) | .value')
            
            # Commit the documentation changes
            git commit -m "docs: update documentation for release v$HIGHEST_VERSION" \
                      -m "- Updated VERSIONS.md with new container versions" \
                      -m "- Updated README files with latest image sizes" \
                      -m "- Updated CHANGELOG.md with release notes" \
                      -m "- Updated tool version information"
            
            echo "‚úÖ Documentation changes committed"
            
            # Push the documentation commit
            git push origin main
            echo "‚úÖ Documentation changes pushed to main branch"
          fi

      - name: Create Git Tag
        if: steps.release_analysis.outputs.release_needed == 'true' && steps.build_containers.outputs.build_success == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          VERSION_MAP: ${{ steps.release_analysis.outputs.version_map }}
          RELEASE_TYPE: ${{ steps.release_analysis.outputs.release_type }}
        run: |
          echo "üè∑Ô∏è  Creating git tag for Docker image release..."

          # Configure git
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git config --local user.name "${{ github.actor }}"

          # Get the highest version for the tag
          HIGHEST_VERSION=$(echo "$VERSION_MAP" | jq -r 'to_entries | max_by(.value | split(".") | map(tonumber)) | .value')
          TAG_NAME="v$HIGHEST_VERSION"

          echo "üìã Creating tag: $TAG_NAME"

          # Create annotated tag with release information
          AFFECTED_CONTAINERS=$(echo "$VERSION_MAP" | jq -r 'keys | join(", ")')
          git tag -a "$TAG_NAME" -m "Docker Images Release $TAG_NAME" \
                                 -m "Released containers: $AFFECTED_CONTAINERS" \
                                 -m "Release type: $RELEASE_TYPE" \
                                 -m "Build date: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

          # Push the tag
          git push origin "$TAG_NAME"

          echo "‚úÖ Git tag $TAG_NAME created and pushed"
          echo "üê≥ Docker images are available in registries with version $TAG_NAME"

      - name: No release needed
        if: steps.release_analysis.outputs.release_needed != 'true'
        run: |
          echo "‚ÑπÔ∏è  No Docker image release needed - all images are up to date and no code changes require new image versions"
          echo "‚úÖ Workflow completed successfully"
