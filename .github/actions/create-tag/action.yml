name: "Create Git Tag"
description: "Creates and pushes a git tag for the release"

inputs:
  version-map:
    description: "JSON map of container names to versions"
    required: true
  release-type:
    description: "Type of release (patch, minor, major)"
    required: true
  github-token:
    description: "GitHub token for pushing tags"
    required: true

runs:
  using: "composite"
  steps:
    - name: Create and push tag
      shell: bash
      env:
        VERSION_MAP: ${{ inputs.version-map }}
        RELEASE_TYPE: ${{ inputs.release-type }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        echo "üè∑Ô∏è  Creating git tag for Docker image release..."

        # Configure git
        git config --global user.email "${{ github.repository_owner_id }}+${{ github.repository_owner }}@users.noreply.github.com"
        git config --global user.name "${{ github.actor }}"

        # Get the highest version for the tag
        HIGHEST_VERSION=$(echo "$VERSION_MAP" | jq -r 'to_entries | max_by(.value | split(".") | map(tonumber)) | .value')
        TAG_NAME="v$HIGHEST_VERSION"

        echo "üìã Creating tag: $TAG_NAME"

        # Create annotated tag with release information
        AFFECTED_CONTAINERS=$(echo "$VERSION_MAP" | jq -r 'keys | join(", ")')
        git tag -a "$TAG_NAME" -m "Docker Images Release $TAG_NAME" \
                               -m "Released containers: $AFFECTED_CONTAINERS" \
                               -m "Release type: $RELEASE_TYPE" \
                               -m "Build date: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

        # Pull any remote changes before pushing the tag
        echo "üîÑ Ensuring we have latest changes before pushing tag..."
        git pull origin main --no-edit || echo "‚ö†Ô∏è  Pull failed, but proceeding with tag push"

        # Push the tag
        git push origin "$TAG_NAME"

        echo "‚úÖ Git tag $TAG_NAME created and pushed"
        echo "üê≥ Docker images are available in registries with version $TAG_NAME"
