name: "Cleanup Container Versions"
description: "Maintains only the 5 most recent versions of each container in GitHub, GitLab, and Docker Hub registries"

inputs:
  github-token:
    description: "GitHub token for container registry"
    required: true
  gitlab-token:
    description: "GitLab token for container registry"
    required: true
  github-registry:
    description: "GitHub container registry URL"
    required: true
  gitlab-registry:
    description: "GitLab container registry URL"
    required: true
  gitlab-project-path:
    description: "GitLab project path"
    required: true
  dockerhub-token:
    description: "Docker Hub token for authentication"
    required: true
  dockerhub-username:
    description: "Docker Hub username"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install jq
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Cleanup GitHub Container Registry
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        # Function to delete package version
        delete_ghcr_version() {
          local package_name=$1
          local version_id=$2
          
          curl -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/user/packages/container/${package_name}/versions/${version_id}"
        }

        # Get all container packages
        packages=$(curl -s \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/user/packages?package_type=container" | jq -r '.[] | select(.name | contains("'${GITHUB_REPOSITORY##*/}'")) | .name')

        for package in $packages; do
          echo "Processing package: $package"
          
          # Get all versions except 'latest' tag, sorted by creation date
          versions=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/user/packages/container/${package}/versions" | \
            jq -r '.[] | select(.metadata.container.tags[] | contains("latest") | not) | {id: .id, created_at: .created_at} | @json')

          # Keep only the version IDs to delete (skip 5 most recent)
          delete_versions=$(echo "$versions" | \
            jq -s 'sort_by(.created_at) | reverse | .[5:] | .[].id')

          # Delete old versions
          for version_id in $delete_versions; do
            echo "Deleting version $version_id of package $package"
            delete_ghcr_version "$package" "$version_id"
          done
        done

    - name: Cleanup GitLab Container Registry
      shell: bash
      env:
        GITLAB_TOKEN: ${{ inputs.gitlab-token }}
        GITLAB_PROJECT_PATH: ${{ inputs.gitlab-project-path }}
      run: |
        # Function to delete container repository tag
        delete_gitlab_tag() {
          local repository_id=$1
          local tag_name=$2
          
          curl -X DELETE \
            --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
            "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_PATH//\//%2F}/registry/repositories/${repository_id}/tags/${tag_name}"
        }

        # Get all container repositories
        repositories=$(curl -s \
          --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_PATH//\//%2F}/registry/repositories" | \
          jq -r '.[].id')

        for repository_id in $repositories; do
          echo "Processing repository ID: $repository_id"
          
          # Get all tags except 'latest', sorted by creation date
          tags=$(curl -s \
            --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
            "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_PATH//\//%2F}/registry/repositories/${repository_id}/tags" | \
            jq -r '.[] | select(.name != "latest") | {name: .name, created_at: .created_at} | @json')

          # Keep only the tags to delete (skip 5 most recent)
          delete_tags=$(echo "$tags" | \
            jq -s 'sort_by(.created_at) | reverse | .[5:] | .[].name')

          # Delete old tags
          for tag_name in $delete_tags; do
            echo "Deleting tag $tag_name from repository $repository_id"
            delete_gitlab_tag "$repository_id" "$tag_name"
          done
        done

    - name: Cleanup Docker Hub Registry
      shell: bash
      env:
        DOCKERHUB_TOKEN: ${{ inputs.dockerhub-token }}
        DOCKERHUB_USERNAME: ${{ inputs.dockerhub-username }}
      run: |
        # Get Docker Hub JWT token
        TOKEN=$(curl -s -H "Content-Type: application/json" \
          -X POST \
          -d '{"username": "'$DOCKERHUB_USERNAME'", "password": "'$DOCKERHUB_TOKEN'"}' \
          https://hub.docker.com/v2/users/login/ | jq -r .token)

        # Function to delete Docker Hub tag
        delete_dockerhub_tag() {
          local repository=$1
          local tag_name=$2
          
          curl -X DELETE \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/${DOCKERHUB_USERNAME}/${repository}/tags/${tag_name}/"
        }

        # Get list of repositories
        repositories=$(curl -s \
          -H "Authorization: JWT $TOKEN" \
          "https://hub.docker.com/v2/repositories/${DOCKERHUB_USERNAME}/?page_size=100" | \
          jq -r '.results[].name')

        for repository in $repositories; do
          echo "Processing repository: $repository"
          
          # Get all tags except 'latest', sorted by creation date
          tags=$(curl -s \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/${DOCKERHUB_USERNAME}/${repository}/tags/?page_size=100" | \
            jq -r '.results[] | select(.name != "latest") | {name: .name, last_updated: .last_updated} | @json')

          # Keep only the tags to delete (skip 5 most recent)
          delete_tags=$(echo "$tags" | \
            jq -s 'sort_by(.last_updated) | reverse | .[5:] | .[].name')

          # Delete old tags
          for tag_name in $delete_tags; do
            echo "Deleting tag $tag_name from repository $repository"
            delete_dockerhub_tag "$repository" "$tag_name"
          done
        done